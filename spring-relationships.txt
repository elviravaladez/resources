-------------

RELATIONSHIPS

-------------

==================================
ORM -> Object to Relational Mapper
==================================

    ORM (Object Relational Mapper) lets us treat our relational data as if it is object-oriented.
        Example:
            Instead of saying that we have a record for an ad in the database and the ad record has
            a column for "user_id" that identifies the user record who created the ad, we can simply
            say that an "Ad" object has a "User" property.

            Similarly, we will be able to say that a "User" object has a property "ads" that is a list
            of "Ad" objects. This allows us to focus less on the database details and more on our
            application-specific logic.

==========
ONE-TO-ONE
==========

    Mapping a one-to-one relationship with JPA is as easy as adding the "@OneToOne" annotation.
    Following our example, ads belong to a single "User."

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String title;

            @Column
            private String description;

            @OneToOne
            private User owner;
        }
    -----------------------------------------------------------------

    This mapping is equivalent to the following MySQL table definition:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE ads (
            id BIGINT NOT NULL AUTO_INCREMENT,
            title VARCHAR(255) NOT NULL,
            description VARCHAR(255),
            owner_id BIGINT NOT NULL,
            PRIMARY KEY (id),
            FOREIGN KEY (owner_id) REFERENCES users(id)
        );
    -----------------------------------------------------------------

    As you can see, Hibernate generates a column name based on the property
    name, in this case, the property "owner" generates a column "owner_id."


===========
ONE-TO-MANY
===========

    A many-to-one association and a one-to-many association are the SAME ASSOCIATION
    seen from the perspective of the owning and subordinate entities, respectively.

    Going back to our "Ad" class, an ad can have several images; we can map this as a
    bi-directional association as follows:

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            /* ... */

           @OneToMany(cascade = CascadeType.ALL, mappedBy = "ad")
           private List<AdImage> images;
        }

        @Entity
        @Table(name="ad_images")
        public class AdImage {
            @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String path;

            @ManyToOne
            @JoinColumn (name = "ad_id")
            private Ad ad;
        }
    -----------------------------------------------------------------

    The "ad_images" definition would look like the following:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE ad_images (
            id BIGINT NOT NULL AUTO_INCREMENT,
            path VARCHAR(255) NOT NULL,
            ad_id BIGINT,
            PRIMARY KEY (id),
            FOREIGN KEY (ad_id) REFERENCES ads(id)
        );
    -----------------------------------------------------------------


=============
MANY-TO-MANY
=============

    Continuing our example, let's create a many-to-many relationship between ads and categories.

    The mapping would look like the following:

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            /* ... */

           @ManyToMany(cascade = CascadeType.ALL)
           @JoinTable(
               name="ads_categories",
               joinColumns={@JoinColumn(name="ad_id")},
               inverseJoinColumns={@JoinColumn(name="category_id")}
           )
           private List<AdCategory> categories;
        }

        @Entity
        @Table(name="categories")
        public class AdCategory {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String name;

            @ManyToMany(mappedBy = "categories")
            private List<Ad> ads;
        }
    -----------------------------------------------------------------

    This would generate the following MySQL code:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE categories (
            id BIGINT NOT NULL AUTO_INCREMENT,
            name VARCHAR(255) NOT NULL,
            PRIMARY KEY (id)
        );

        CREATE TABLE ads_categories (
            ad_id BIGINT NOT NULL,
            category_id BIGINT NOT NULL,
            FOREIGN KEY (ad_id) REFERENCES ads(id),
            FOREIGN KEY (category_id) REFERENCES categories(id)
        );
    -----------------------------------------------------------------


==========================
WORKING WITH RELATIONSHIPS
==========================

    Here, we get the username of the user who posted an Ad:

    Code:
    -----------------------------------------------------------------
        Ad ad = adDao.getOne(1L);
        String username = ad.getOwner().getUsername();
        System.out.println(username);
    -----------------------------------------------------------------



    This displays the categories associated with an ad in the HTML view:

    Code:
    -----------------------------------------------------------------
        <h3>Here are the categories for the ad:</h3>
        <ul>
            <li th:each="category : ${ad.categories}" th:text="${category.name}" />
        </ul>
    -----------------------------------------------------------------



    Here, we set the user before creating an ad:

    Code:
    -----------------------------------------------------------------
        User user = userDao.getOne(1L); // just use the first user in the db
        Ad ad = new Ad();
        ad.setTitle("Bike for sale");
        ad.setDescription("7 speed bike in good condition.");
        ad.setOwner(user);
        adDao.save(ad);
    -----------------------------------------------------------------