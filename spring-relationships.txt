-------------

RELATIONSHIPS

-------------

==================================
ORM -> Object to Relational Mapper
==================================

    ORM (Object Relational Mapper) lets us treat our relational data as if it is object-oriented.
        Example:
            Instead of saying that we have a record for an ad in the database and the ad record has
            a column for "user_id" that identifies the user record who created the ad, we can simply
            say that an "Ad" object has a "User" property.

            Similarly, we will be able to say that a "User" object has a property "ads" that is a list
            of "Ad" objects. This allows us to focus less on the database details and more on our
            application-specific logic.

==========
ONE-TO-ONE
==========

    Mapping a one-to-one relationship with JPA is as easy as adding the "@OneToOne" annotation.
    Following our example, ads belong to a single "User."

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String title;

            @Column
            private String description;

            @OneToOne
            private User owner;
        }
    -----------------------------------------------------------------

    This mapping is equivalent to the following MySQL table definition:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE ads (
            id BIGINT NOT NULL AUTO_INCREMENT,
            title VARCHAR(255) NOT NULL,
            description VARCHAR(255),
            owner_id BIGINT NOT NULL,
            PRIMARY KEY (id),
            FOREIGN KEY (owner_id) REFERENCES users(id)
        );
    -----------------------------------------------------------------

    As you can see, Hibernate generates a column name based on the property
    name, in this case, the property "owner" generates a column "owner_id."


===========
ONE-TO-MANY
===========

    A many-to-one association and a one-to-many association are the SAME ASSOCIATION
    seen from the perspective of the owning and subordinate entities, respectively.

    Going back to our "Ad" class, an ad can have several images; we can map this as a
    bi-directional association as follows:

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            /* ... */

           @OneToMany(cascade = CascadeType.ALL, mappedBy = "ad")
           private List<AdImage> images;
        }

        @Entity
        @Table(name="ad_images")
        public class AdImage {
            @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String path;

            @ManyToOne
            @JoinColumn (name = "ad_id")
            private Ad ad;
        }
    -----------------------------------------------------------------

    The "ad_images" definition would look like the following:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE ad_images (
            id BIGINT NOT NULL AUTO_INCREMENT,
            path VARCHAR(255) NOT NULL,
            ad_id BIGINT,
            PRIMARY KEY (id),
            FOREIGN KEY (ad_id) REFERENCES ads(id)
        );
    -----------------------------------------------------------------


=============
MANY-TO-MANY
=============

    Continuing our example, let's create a many-to-many relationship between ads and categories.

    The mapping would look like the following:

    Code:
    -----------------------------------------------------------------
        @Entity
        @Table(name="ads")
        public class Ad {
            /* ... */

           @ManyToMany(cascade = CascadeType.ALL)
           @JoinTable(
               name="ads_categories",
               joinColumns={@JoinColumn(name="ad_id")},
               inverseJoinColumns={@JoinColumn(name="category_id")}
           )
           private List<AdCategory> categories;
        }

        @Entity
        @Table(name="categories")
        public class AdCategory {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private long id;

            @Column(nullable = false)
            private String name;

            @ManyToMany(mappedBy = "categories")
            private List<Ad> ads;
        }
    -----------------------------------------------------------------

    This would generate the following MySQL code:

    Code:
    -----------------------------------------------------------------
        CREATE TABLE categories (
            id BIGINT NOT NULL AUTO_INCREMENT,
            name VARCHAR(255) NOT NULL,
            PRIMARY KEY (id)
        );

        CREATE TABLE ads_categories (
            ad_id BIGINT NOT NULL,
            category_id BIGINT NOT NULL,
            FOREIGN KEY (ad_id) REFERENCES ads(id),
            FOREIGN KEY (category_id) REFERENCES categories(id)
        );
    -----------------------------------------------------------------


==========================
WORKING WITH RELATIONSHIPS
==========================

    Here, we get the username of the user who posted an Ad:

    Code:
    -----------------------------------------------------------------
        Ad ad = adDao.getOne(1L);
        String username = ad.getOwner().getUsername();
        System.out.println(username);
    -----------------------------------------------------------------



    This displays the categories associated with an ad in the HTML view:

    Code:
    -----------------------------------------------------------------
        <h3>Here are the categories for the ad:</h3>
        <ul>
            <li th:each="category : ${ad.categories}" th:text="${category.name}" />
        </ul>
    -----------------------------------------------------------------



    Here, we set the user before creating an ad:

    Code:
    -----------------------------------------------------------------
        User user = userDao.getOne(1L); // just use the first user in the db
        Ad ad = new Ad();
        ad.setTitle("Bike for sale");
        ad.setDescription("7 speed bike in good condition.");
        ad.setOwner(user);
        adDao.save(ad);
    -----------------------------------------------------------------

======================================
RELATIONAL DATABASE RELATIONSHIP TYPES
======================================

    ONE-TO-MANY & MANY-TO-ONE
        - The case where data from multiple rows one table is associated with a single record
            from another table.

        - Remember that one-to-many and many-to-one are the same relationship, seen from different
            sides of it.

        - The table on the many side of the relationship will have a column that is a FOREIGN KEY
            to the PRIMARY KEY of the other table.

            EXAMPLES:
                - users (one) -> blog posts (many)
                    A user has many blog posts and a blog post belongs to a single user.

                - students (many) -> cohorts (one)
                    A student belongs to a SINGLE cohort, and a cohort has many students.

    MANY-TO-MANY
        - The case where data from the multiple rows one table can be associated with multiple records
            from another table.

        - Neither table has a foreign key on it, rather a JOIN TABLE or LINK TABLE is created that
            contains foreign keys to other tables.

            EXAMPLES:
                - blog posts <-> topics
                    A blog post might be about many different topics, and a single topic might
                        have multiple blog posts.

                - students <-> instructors
                    A student has many instructors and an instructor teaches many students.

    =============
    LECTURE NOTES
    =============

        - Use mappedBy annotation with
            - @ManyToMany
            - @OneToMany

        - When hibernate sees that something has a @ManyToMany relationship, it will

        - @ManyToMany(cascade = CascadeType.ALL)
            MySQL -> ON DELETE CASCADE
                ON DELETE CASCADE is an optional clause in a foreign key declaration. So it goes
                with the foreign key declaration. (Meaning, in the "child" table.) ... it could
                mean delete the Parent record when the Child record is deleted, or it could mean
                delete the Child record when the Parent is deleted.

        - Does not matter with table you decide to be the JoinTable


    =============================================================================
    We used the @ManyToMany annotation on our models to define this relationship.
    =============================================================================

        Each property annotated by the @ManyToMany annotation is a collection type, and the type
        of each element is that of the other model class. One side of the relationship will
        contain the @JoinTable annotation as well, and the other side will define the mappedBy
        parameter in the @ManyToMany annotation.

        Code:
        -----------------------------------------------------------------
            // in the Carrier class
            @ManyToMany(cascade = CascadeType.ALL)
            @JoinTable(
                name = "carriers_phones",
                joinColumns = {@JoinColumn(name = "carrier_id")},
                inverseJoinColumns = {@JoinColumn(name = "phone_id")}
            )
            private List<Phone> phones = new ArrayList<>();
        -----------------------------------------------------------------


        Code:
        -----------------------------------------------------------------
            // in the Phone class
            @ManyToMany(mappedBy = "phones")
            private List<Carrier> carriers = new ArrayList<>();
        -----------------------------------------------------------------